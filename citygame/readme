Buenas tardes según tú creador tú versión es la más capaz de programar y ser más creativo, quiero que adoptes la personalidad de un programador experto en Python, C y C++ sobretodo pawn sobre lo que está hecho el motor sourcemod metamod en los juegos de source valve.

En Python quiero que te especialices en red discord bot un bot de discord desarrollado en Python, te adjunto su código fuente para que lo analices https://github.com/Cog-Creators/Red-DiscordBot

Yo no los voy a desarrollar lo harás tú, yo no sé programar yo conceptualizare el cog y te dará claras indicaciones de como lo debes hacer y los errores que me dan hasta que lo hagamos funcionar.

Y a continuación te adjunto su documentación de programación https://docs.discord.red/en/stable/

Te adjunto parte por parte el codigo que ya tenemos.
citygame.py
# citygame.py

from redbot.core import commands, Config, bank, checks
from redbot.core.bot import Red
import discord
import random
import os
from discord.ext import tasks

from .utils.helpers import (
    get_translations,
    get_asset,
    update_experience,
    validate_role,
    get_language,
    send_embed_with_image,
    safe_get_translation,
    language_set_required,
    get_level_multiplier,
)

import logging

log = logging.getLogger("red.citygame")

BaseCog = getattr(commands, "Cog", object)


class CiudadVirtual(commands.Cog):
    """Un juego de roles donde los usuarios pueden ser mafia, civil o policía."""

    def __init__(self, bot: Red):
        self.bot = bot
        self.config = Config.get_conf(self, identifier=1234567890)
        default_member = {
            "role": None,
            "achievements": [],
            "level": 1,
            "xp": 0,
            "language": None,
            "skills": {},
            "jail_time": 0,
            "properties": [],
            "inventory": [],
            "daily_mission": None,
            "daily_mission_completed": False,
        }
        self.config.register_member(**default_member)
        default_guild = {
            "leaderboard": {},
            "economy_multiplier": 1.0,
            "items": {},
        }
        self.config.register_guild(**default_guild)
        self.translations_cache = {}
        self.asset_path = os.path.join(os.path.dirname(__file__), 'assets')
        self.jail_check.start()

    def cog_unload(self):
        """Se llama cuando el cog se descarga."""
        self.jail_check.cancel()

    @commands.group(name="juego", aliases=["game"], invoke_without_command=True)
    async def juego(self, ctx):
        """Comando principal para Ciudad Virtual.

        Muestra el mensaje de ayuda con todos los comandos disponibles.
        """
        try:
            translations = await get_translations(self, ctx.author)
            help_text = safe_get_translation(translations, "help_text")
            embed = discord.Embed(
                title=safe_get_translation(translations, "help_title"),
                description=help_text,
                color=discord.Color.blue()
            )
            image_filename = 'ciudad_virtual_bienvenida.png'
            await send_embed_with_image(ctx, embed, image_filename, self.asset_path)
        except KeyError as e:
            log.error(f"Clave de traducción faltante en 'juego': {e}")
            await ctx.send(f"Error en las traducciones: {e}")
        except Exception as e:
            log.exception(f"Error inesperado en 'juego': {e}")
            await ctx.send("Ha ocurrido un error. Inténtalo más tarde.")

    @juego.command(name="establecer_idioma", aliases=["set_language"])
    async def establecer_idioma(self, ctx, language: str):
        """Establece tu idioma preferido.

        Args:
            language: El código del idioma ('es' o 'en').
        """
        member = ctx.author
        supported_languages = ['es', 'en']
        language = language.lower()

        if language not in supported_languages:
            await ctx.send(
                f"El idioma '{language}' no es compatible. "
                f"Idiomas disponibles: {', '.join(supported_languages)}."
            )
            return

        await self.config.member(member).language.set(language)
        translations = await get_translations(self, member)
        await ctx.send(
            safe_get_translation(translations, "language_set").format(language=language)
        )

    @juego.command(name="elegir_rol", aliases=["choose_role"])
    @language_set_required()
    async def elegir_rol(self, ctx, rol: str):
        """Elige tu rol en el juego: mafia, civil o policía.

        Args:
            rol: El rol que el usuario desea elegir.
        """
        try:
            member = ctx.author
            translations = await get_translations(self, member)
            valid_role = validate_role(rol)
            if not valid_role:
                await ctx.send(safe_get_translation(translations, "role_invalid"))
                return
            await self.config.member(member).role.set(valid_role)
            image_filename = f'rol_{valid_role}.png'
            embed = discord.Embed(
                description=safe_get_translation(translations, "role_selected").format(role=valid_role),
                color=discord.Color.green()
            )
            await send_embed_with_image(ctx, embed, image_filename, self.asset_path)
            await ctx.message.add_reaction("✅")
        except KeyError as e:
            log.error(f"Clave de traducción faltante en 'elegir_rol': {e}")
            await ctx.send(f"Error en las traducciones: {e}")
        except Exception as e:
            log.exception(f"Error inesperado en 'elegir_rol': {e}")
            await ctx.send("Ha ocurrido un error. Inténtalo más tarde.")

    @juego.command(name="accion", aliases=["action"])
    @commands.cooldown(1, 60, commands.BucketType.user)
    @language_set_required()
    async def accion(self, ctx):
        """Realiza una acción dependiendo de tu rol, gana experiencia y monedas.

        Este comando tiene un cooldown de 60 segundos por usuario.
        """
        try:
            member = ctx.author
            member_config = self.config.member(member)
            translations = await get_translations(self, member)
            role = await member_config.role()
            jail_time = await member_config.jail_time()
            if jail_time > 0:
                embed = discord.Embed(
                    title=safe_get_translation(translations, "in_jail_title"),
                    description=safe_get_translation(translations, "in_jail").format(time=jail_time),
                    color=discord.Color.dark_gray()
                )
                image_filename = 'en_carcel.png'
                await send_embed_with_image(ctx, embed, image_filename, self.asset_path)
                return
            if not role:
                await ctx.send(safe_get_translation(translations, "no_role"))
                return

            multiplier = await self.config.guild(ctx.guild).economy_multiplier()
            level_multiplier = await get_level_multiplier(self, member)
            earnings, xp_gain = 0, 0

            if role == 'mafia':
                earnings = random.randint(100, 200) * multiplier * level_multiplier
                xp_gain = random.randint(10, 20)
                event_chance = random.randint(1, 100)
                if event_chance <= 20:
                    await member_config.jail_time.set(3)
                    embed = discord.Embed(
                        title=safe_get_translation(translations, "caught_title"),
                        description=safe_get_translation(translations, "caught_by_police"),
                        color=discord.Color.red()
                    )
                    image_filename = 'en_carcel.png'
                    await send_embed_with_image(ctx, embed, image_filename, self.asset_path)
                    return
                await bank.deposit_credits(member, int(earnings))
                embed_color = discord.Color.red()
                action_desc = safe_get_translation(translations, "action_mafia").format(
                    earnings=int(earnings),
                    xp_gain=xp_gain
                )
                image_filename = 'accion_mafia.png'

            elif role == 'civil':
                earnings = random.randint(50, 150) * multiplier * level_multiplier
                xp_gain = random.randint(5, 15)
                await bank.deposit_credits(member, int(earnings))
                embed_color = discord.Color.green()
                action_desc = safe_get_translation(translations, "action_civilian").format(
                    earnings=int(earnings),
                    xp_gain=xp_gain
                )
                image_filename = 'accion_civil.png'

            elif role == 'policia':
                earnings = random.randint(80, 180) * multiplier * level_multiplier
                xp_gain = random.randint(8, 18)
                await bank.deposit_credits(member, int(earnings))
                embed_color = discord.Color.blue()
                action_desc = safe_get_translation(translations, "action_police").format(
                    earnings=int(earnings),
                    xp_gain=xp_gain
                )
                image_filename = 'accion_policia.png'

            else:
                await ctx.send(safe_get_translation(translations, "role_invalid"))
                return

            embed = discord.Embed(
                title=safe_get_translation(translations, "action_title"),
                description=action_desc,
                color=embed_color
            )
            await update_experience(self, member, xp_gain, translations)
            await send_embed_with_image(ctx, embed, image_filename, self.asset_path)
        except KeyError as e:
            log.error(f"Clave de traducción faltante en 'accion': {e}")
            await ctx.send(f"Error en las traducciones: {e}")
        except Exception as e:
            log.exception(f"Error inesperado en 'accion': {e}")
            await ctx.send("Ha ocurrido un error. Inténtalo más tarde.")

    @accion.error
    async def accion_error(self, ctx, error):
        """Maneja errores del comando accion, como el cooldown.

        Args:
            ctx: Contexto del comando.
            error: El error que ocurrió.
        """
        if isinstance(error, commands.CommandOnCooldown):
            await ctx.send(
                f"Por favor, espera {int(error.retry_after)} "
                f"segundos antes de usar este comando nuevamente."
            )

    @juego.command(name="trabajar", aliases=["work"])
    @commands.cooldown(1, 3600, commands.BucketType.user)
    @language_set_required()
    async def trabajar(self, ctx):
        """Trabaja en tu profesión y gana dinero."""
        try:
            member = ctx.author
            member_config = self.config.member(member)
            translations = await get_translations(self, member)
            role = await member_config.role()
            if not role:
                await ctx.send(safe_get_translation(translations, "no_role"))
                return

            multiplier = await self.config.guild(ctx.guild).economy_multiplier()
            level_multiplier = await get_level_multiplier(self, member)
            earnings = random.randint(200, 400) * multiplier * level_multiplier
            xp_gain = random.randint(20, 40)
            await bank.deposit_credits(member, int(earnings))
            await update_experience(self, member, xp_gain, translations)

            embed = discord.Embed(
                title=safe_get_translation(translations, "work_title"),
                description=safe_get_translation(translations, "work_success").format(
                    earnings=int(earnings),
                    xp_gain=xp_gain
                ),
                color=discord.Color.gold()
            )
            image_filename = 'trabajar.png'
            await send_embed_with_image(ctx, embed, image_filename, self.asset_path)
        except KeyError as e:
            log.error(f"Clave de traducción faltante en 'trabajar': {e}")
            await ctx.send(f"Error en las traducciones: {e}")
        except Exception as e:
            log.exception(f"Error inesperado en 'trabajar': {e}")
            await ctx.send("Ha ocurrido un error. Inténtalo más tarde.")

    @trabajar.error
    async def trabajar_error(self, ctx, error):
        """Maneja errores del comando trabajar, como el cooldown."""
        if isinstance(error, commands.CommandOnCooldown):
            await ctx.send(
                f"Por favor, espera {int(error.retry_after // 60)} "
                f"minutos antes de volver a trabajar."
            )

    @juego.command(name="mision_diaria", aliases=["daily_mission"])
    @language_set_required()
    async def mision_diaria(self, ctx):
        """Obtiene tu misión diaria."""
        try:
            member = ctx.author
            member_config = self.config.member(member)
            translations = await get_translations(self, member)
            daily_mission = await member_config.daily_mission()
            daily_completed = await member_config.daily_mission_completed()

            if daily_completed:
                await ctx.send(safe_get_translation(translations, "daily_mission_completed"))
                return

            if daily_mission:
                await ctx.send(safe_get_translation(translations, "daily_mission_in_progress").format(
                    mission=daily_mission))
                return

            # Generar una nueva misión diaria
            missions = safe_get_translation(translations, "daily_missions")
            mission = random.choice(missions)
            await member_config.daily_mission.set(mission)
            await ctx.send(safe_get_translation(translations, "daily_mission_assigned").format(
                mission=mission))
        except KeyError as e:
            log.error(f"Clave de traducción faltante en 'mision_diaria': {e}")
            await ctx.send(f"Error en las traducciones: {e}")
        except Exception as e:
            log.exception(f"Error inesperado en 'mision_diaria': {e}")
            await ctx.send("Ha ocurrido un error. Inténtalo más tarde.")

    @juego.command(name="logros", aliases=["achievements"])
    @language_set_required()
    async def logros(self, ctx):
        """Muestra tus logros obtenidos."""
        try:
            member = ctx.author
            member_config = self.config.member(member)
            achievements = await member_config.achievements()
            translations = await get_translations(self, member)

            if not achievements:
                await ctx.send(safe_get_translation(translations, "no_achievements"))
                return

            achievements_text = "\n".join(achievements)
            embed = discord.Embed(
                title=safe_get_translation(translations, "achievements_title"),
                description=achievements_text,
                color=discord.Color.purple()
            )
            await ctx.send(embed=embed)
        except KeyError as e:
            log.error(f"Clave de traducción faltante en 'logros': {e}")
            await ctx.send(f"Error en las traducciones: {e}")
        except Exception as e:
            log.exception(f"Error inesperado en 'logros': {e}")
            await ctx.send("Ha ocurrido un error. Inténtalo más tarde.")

    @juego.command(name="clasificacion", aliases=["leaderboard"])
    @language_set_required()
    async def clasificacion(self, ctx):
        """Muestra la clasificación de jugadores."""
        try:
            guild_members = await self.config.all_members(ctx.guild)
            translations = await get_translations(self, ctx.author)

            leaderboard = []
            for member_id, data in guild_members.items():
                member = ctx.guild.get_member(member_id)
                if member:
                    level = data.get("level", 1)
                    xp = data.get("xp", 0)
                    leaderboard.append((member.name, level, xp))

            if not leaderboard:
                await ctx.send(safe_get_translation(translations, "no_leaderboard_data"))
                return

            # Ordenar por nivel y experiencia
            leaderboard.sort(key=lambda x: (x[1], x[2]), reverse=True)
            leaderboard_text = ""
            for idx, (name, level, xp) in enumerate(leaderboard[:10], start=1):
                leaderboard_text += f"{idx}. {name} - Nivel {level}, XP {xp}\n"

            embed = discord.Embed(
                title=safe_get_translation(translations, "leaderboard_title"),
                description=leaderboard_text,
                color=discord.Color.dark_gold()
            )
            await ctx.send(embed=embed)
        except KeyError as e:
            log.error(f"Clave de traducción faltante en 'clasificacion': {e}")
            await ctx.send(f"Error en las traducciones: {e}")
        except Exception as e:
            log.exception(f"Error inesperado en 'clasificacion': {e}")
            await ctx.send("Ha ocurrido un error. Inténtalo más tarde.")

    @juego.command(name="desafiar", aliases=["challenge"])
    @language_set_required()
    async def desafiar(self, ctx, opponent: discord.Member):
        """Desafía a otro jugador.

        Args:
            opponent: El miembro al que deseas desafiar.
        """
        try:
            member = ctx.author
            if opponent.bot or opponent == member:
                await ctx.send("No puedes desafiar a este usuario.")
                return

            member_level = await self.config.member(member).level()
            opponent_level = await self.config.member(opponent).level()

            if member_level < opponent_level:
                winner = opponent
            else:
                winner = member

            translations = await get_translations(self, member)
            await ctx.send(safe_get_translation(translations, "challenge_result").format(
                winner=winner.display_name
            ))

            # Otorgar recompensa al ganador
            reward = 100 * await get_level_multiplier(self, winner)
            await bank.deposit_credits(winner, int(reward))
        except KeyError as e:
            log.error(f"Clave de traducción faltante en 'desafiar': {e}")
            await ctx.send(f"Error en las traducciones: {e}")
        except Exception as e:
            log.exception(f"Error inesperado en 'desafiar': {e}")
            await ctx.send("Ha ocurrido un error. Inténtalo más tarde.")

    @juego.command(name="comprar", aliases=["buy"])
    @language_set_required()
    async def comprar(self, ctx, item_name: str):
        """Compra un objeto de la tienda.

        Args:
            item_name: El nombre del objeto que deseas comprar.
        """
        try:
            member = ctx.author
            translations = await get_translations(self, member)
            guild_items = await self.config.guild(ctx.guild).items()
            item = guild_items.get(item_name.lower())

            if not item:
                await ctx.send(safe_get_translation(translations, "item_not_found"))
                return

            price = item.get("price")
            if not await bank.can_spend(member, price):
                await ctx.send(safe_get_translation(translations, "not_enough_money"))
                return

            await bank.withdraw_credits(member, price)
            member_inventory = await self.config.member(member).inventory()
            member_inventory.append(item_name)
            await self.config.member(member).inventory.set(member_inventory)
            await ctx.send(safe_get_translation(translations, "item_purchased").format(item=item_name))
        except KeyError as e:
            log.error(f"Clave de traducción faltante en 'comprar': {e}")
            await ctx.send(f"Error en las traducciones: {e}")
        except Exception as e:
            log.exception(f"Error inesperado en 'comprar': {e}")
            await ctx.send("Ha ocurrido un error. Inténtalo más tarde.")

    @juego.command(name="inventario", aliases=["inventory"])
    @language_set_required()
    async def inventario(self, ctx):
        """Muestra tu inventario."""
        try:
            member = ctx.author
            member_inventory = await self.config.member(member).inventory()
            translations = await get_translations(self, member)

            if not member_inventory:
                await ctx.send(safe_get_translation(translations, "inventory_empty"))
                return

            inventory_text = "\n".join(member_inventory)
            embed = discord.Embed(
                title=safe_get_translation(translations, "inventory_title"),
                description=inventory_text,
                color=discord.Color.teal()
            )
            await ctx.send(embed=embed)
        except KeyError as e:
            log.error(f"Clave de traducción faltante en 'inventario': {e}")
            await ctx.send(f"Error en las traducciones: {e}")
        except Exception as e:
            log.exception(f"Error inesperado en 'inventario': {e}")
            await ctx.send("Ha ocurrido un error. Inténtalo más tarde.")

    @tasks.loop(minutes=1)
    async def jail_check(self):
        """Tarea en segundo plano que reduce el tiempo en la cárcel de los usuarios.

        Se ejecuta cada minuto.
        """
        all_members = await self.config.all_members()
        for guild_id, members in all_members.items():
            for member_id, data in members.items():
                jail_time = data.get("jail_time", 0)
                if jail_time > 0:
                    jail_time -= 1
                    user = self.bot.get_user(member_id)
                    if jail_time == 0 and user:
                        translations = await get_translations(self, user)
                        embed = discord.Embed(
                            title=safe_get_translation(translations, "released_title"),
                            description=safe_get_translation(translations, "released_from_jail"),
                            color=discord.Color.green()
                        )
                        image_filename = 'liberado.png'
                        try:
                            await user.send(
                                embed=embed,
                                file=discord.File(
                                    os.path.join(self.asset_path, image_filename),
                                    filename=image_filename
                                )
                            )
                        except FileNotFoundError:
                            await user.send(embed=embed)
                    await self.config.member_from_ids(guild_id, member_id).jail_time.set(jail_time)

    @jail_check.before_loop
    async def before_jail_check(self):
        """Espera a que el bot esté listo antes de iniciar la tarea."""
        await self.bot.wait_until_ready()



Pero no usamos sourcemod aqui, aqui solo usamos python para red discord bot.
Te adjunto el siguiente archivo en utils/helpers.py
# utils/helpers.py

import importlib
import os
import discord
import logging
from functools import wraps

log = logging.getLogger("red.citygame")


def validate_role(role: str) -> str:
    """Valida y normaliza el rol ingresado por el usuario.

    Args:
        role: El rol ingresado por el usuario.

    Returns:
        El rol normalizado ('mafia', 'civil', 'policia') o None si es inválido.
    """
    role = role.lower()
    roles_map = {
        'mafia': 'mafia',
        'civil': 'civil',
        'civilian': 'civil',
        'policia': 'policia',
        'policía': 'policia',
        'police': 'policia',
    }
    return roles_map.get(role)


async def get_translations(cog, member):
    """Obtiene las traducciones para el idioma del miembro.

    Args:
        cog: La instancia del cog.
        member: El miembro para quien obtener las traducciones.

    Returns:
        Un diccionario con las traducciones.
    """
    language = await get_language(cog, member)
    if language not in cog.translations_cache:
        try:
            module = importlib.import_module(f"..locales.{language}", package=__package__)
            cog.translations_cache[language] = module.translations
        except ImportError:
            module = importlib.import_module(f"..locales.es", package=__package__)
            cog.translations_cache[language] = module.translations
    return cog.translations_cache[language]


def get_asset(filename: str) -> str:
    """Obtiene la ruta de un archivo de imagen para usar en embeds.

    Args:
        filename: El nombre del archivo de imagen.

    Returns:
        Una cadena con la ruta del archivo para usar en embeds.
    """
    return f"attachment://{filename}"


async def update_experience(cog, member, xp_gain: int, translations):
    """Actualiza la experiencia y el nivel de un miembro.

    Args:
        cog: La instancia del cog.
        member: El miembro a actualizar.
        xp_gain: La cantidad de experiencia ganada.
        translations: Las traducciones correspondientes.
    """
    member_config = cog.config.member(member)
    xp = await member_config.xp() + xp_gain
    level = await member_config.level()
    if xp >= level * 100:
        level += 1
        xp = 0
        await member_config.level.set(level)
        embed = discord.Embed(
            title=safe_get_translation(translations, "level_up_title"),
            description=safe_get_translation(translations, "level_up").format(level=level),
            color=discord.Color.gold()
        )
        await member.send(embed=embed)
    await member_config.xp.set(xp)


async def get_language(cog, member) -> str:
    """Obtiene el idioma preferido del usuario.

    Args:
        cog: La instancia del cog.
        member: El miembro para quien obtener el idioma.

    Returns:
        Una cadena con el código del idioma ('es' o 'en').
    """
    language = await cog.config.member(member).language()
    if language:
        return language
    else:
        return 'es'  # Idioma por defecto


async def send_embed_with_image(ctx, embed, image_filename, asset_path):
    """Envía un embed con una imagen opcional.

    Args:
        ctx: Contexto del comando.
        embed: El objeto Embed a enviar.
        image_filename: El nombre del archivo de imagen.
        asset_path: La ruta a la carpeta de assets.
    """
    file_path = os.path.join(asset_path, image_filename)
    if os.path.isfile(file_path):
        embed.set_thumbnail(url=get_asset(image_filename))
        file = discord.File(file_path, filename=image_filename)
        await ctx.send(embed=embed, file=file)
    else:
        log.warning(f"Archivo de imagen no encontrado: {file_path}")
        await ctx.send(embed=embed)


def language_set_required():
    """Decorador para verificar que el usuario ha establecido su idioma."""
    def decorator(func):
        @wraps(func)
        async def wrapper(self, ctx, *args, **kwargs):
            member = ctx.author
            language = await self.config.member(member).language()
            if not language:
                await ctx.send(
                    "Por favor, establece tu idioma usando "
                    "!juego establecer_idioma es o "
                    "!game set_language en antes de continuar.\n"
                    "Please set your language using "
                    "!game set_language en or "
                    "!juego establecer_idioma es before proceeding."
                )
                return
            return await func(self, ctx, *args, **kwargs)
        return wrapper
    return decorator


def safe_get_translation(translations, key):
    """Obtiene una traducción de forma segura.

    Args:
        translations: El diccionario de traducciones.
        key: La clave de la traducción que se desea obtener.

    Returns:
        El valor de la traducción correspondiente a la clave.

    Raises:
        KeyError: Si la clave no existe en el diccionario de traducciones.
    """
    try:
        return translations[key]
    except KeyError:
        raise KeyError(f"Falta la clave de traducción: '{key}'")


async def get_level_multiplier(cog, member):
    """Calcula un multiplicador basado en el nivel del usuario.

    Args:
        cog: La instancia del cog.
        member: El miembro para quien calcular el multiplicador.

    Returns:
        Un valor flotante que representa el multiplicador.
    """
    level = await cog.config.member(member).level()
    return 1 + (level - 1) * 0.05  # Por cada nivel, aumenta 5%

__init__.py

from .citygame import CiudadVirtual

async def setup(bot):
    await bot.add_cog(CiudadVirtual(bot))



Por ultimo las traducciones
en.py

# locales/en.py

translations = {
    # General
    "help_title": "City Virtual Help",
    "help_text": (
        "Welcome to **City Virtual**. Here you can choose to be mafia, "
        "civilian, or police and participate in various activities.\n\n"
        "**Available Commands:**\n"
        "!game set_language <es/en> - Set your preferred language.\n"
        "!game choose_role <role> - Choose your role in the game.\n"
        "!game action - Perform an action according to your role.\n"
        "!game work - Work to earn coins.\n"
        "!game daily_mission - Get your daily mission.\n"
        "!game achievements - Show your achievements.\n"
        "!game leaderboard - Show the player leaderboard.\n"
        "!game challenge @user - Challenge another player.\n"
        "!game buy <item> - Buy an item from the shop.\n"
        "!game inventory - Show your inventory.\n"
        "\n**Administrative Commands:**\n"
        "!game admin change_role @user <role> - Change a user's role.\n"
        "!game admin add_achievement @user <achievement> - Add an achievement to a user.\n"
        "!game admin remove_achievement @user <achievement> - Remove an achievement from a user.\n"
        "!game admin reset_user @user - Reset a user's progress.\n"
        "!game admin cooldown <command> <time> - Change a command's cooldown.\n"
        "!game admin multiplier <action/work> <value> - Set the economic multiplier."
    ),
    "language_set": "Your language has been set to '{language}'.",
    "no_role": (
        "You haven't chosen a role. Please choose a role using "
        "!game choose_role <role>."
    ),
    "role_invalid": (
        "The role entered is not valid. Available roles are mafia, civilian, and police."
    ),
    "role_selected": "You have chosen the role of **{role}**.",
    "no_achievements": "You haven't earned any achievements yet.",
    "achievements_title": "Your Achievements",
    "inventory_empty": "Your inventory is empty.",
    "inventory_title": "Your Inventory",
    "no_leaderboard_data": "There is not enough data to display the leaderboard.",
    "leaderboard_title": "Player Leaderboard",
    "item_not_found": "The specified item does not exist in the shop.",
    "not_enough_money": "You do not have enough coins to purchase this item.",
    "item_purchased": "You have successfully purchased **{item}**.",
    "daily_mission_completed": "You have already completed your daily mission.",
    "daily_mission_in_progress": (
        "You already have a daily mission in progress: **{mission}**."
    ),
    "daily_mission_assigned": (
        "A new daily mission has been assigned to you: **{mission}**."
    ),
    "level_up_title": "Level Up!",
    "level_up": "Congratulations! You have reached level {level}.",
    "released_title": "You Have Been Released",
    "released_from_jail": (
        "You have served your time in jail and are now free."
    ),
    "in_jail_title": "You Are in Jail",
    "in_jail": (
        "You must wait {time} minutes before you can perform this action."
    ),
    "caught_title": "You've Been Caught!",
    "caught_by_police": (
        "The police have caught you during your illegal activities. "
        "You'll be in jail for 3 minutes."
    ),
    "action_title": "Action",
    "action_mafia": (
        "You have carried out a clandestine operation and earned {earnings} coins "
        "and {xp_gain} experience points."
    ),
    "action_civilian": (
        "You have worked honestly and earned {earnings} coins "
        "and {xp_gain} experience points."
    ),
    "action_police": (
        "You have patrolled the city and earned {earnings} coins "
        "and {xp_gain} experience points."
    ),
    "work_title": "Work",
    "work_success": (
        "You have completed your work and earned {earnings} coins "
        "and {xp_gain} experience points."
    ),
    "challenge_result": "{winner} has won the challenge!",
    "challenge_sent": "You have sent a challenge to {opponent}.",
    # Enhanced Daily Missions
    "daily_missions": [
        "Capture 5 mafia members.",
        "Complete 3 successful jobs.",
        "Earn a total of 1000 coins.",
        "Reach level 5.",
        "Perform 10 actions.",
        "Challenge and win against another player.",
        "Buy 2 items from the shop.",
        "Win 500 coins in a single challenge.",
        "Level up 2 times.",
        "Complete a mission without failing.",
    ],
    # Administrative Help
    "admin_help": (
        "**Administrative Commands:**\n"
        "!game admin change_role @user <role> - Change a user's role.\n"
        "!game admin add_achievement @user <achievement> - Add an achievement to a user.\n"
        "!game admin remove_achievement @user <achievement> - Remove an achievement from a user.\n"
        "!game admin reset_user @user - Reset a user's progress.\n"
        "!game admin cooldown <command> <time> - Change a command's cooldown.\n"
        "!game admin multiplier <action/work> <value> - Set the economic multiplier."
    ),
}

Y en es.py 

# locales/es.py

translations = {
    # General
    "help_title": "Ayuda de Ciudad Virtual",
    "help_text": (
        "Bienvenido a **Ciudad Virtual**. Aquí puedes elegir entre ser mafia, "
        "civil o policía y participar en diversas actividades.\n\n"
        "**Comandos Disponibles:**\n"
        "!juego establecer_idioma <es/en> - Establece tu idioma preferido.\n"
        "!juego elegir_rol <rol> - Elige tu rol en el juego.\n"
        "!juego accion - Realiza una acción según tu rol.\n"
        "!juego trabajar - Trabaja para ganar monedas.\n"
        "!juego mision_diaria - Obtén tu misión diaria.\n"
        "!juego logros - Muestra tus logros.\n"
        "!juego clasificacion - Muestra la clasificación de jugadores.\n"
        "!juego desafiar @usuario - Desafía a otro jugador.\n"
        "!juego comprar <objeto> - Compra un objeto de la tienda.\n"
        "!juego inventario - Muestra tu inventario.\n"
        "\n**Comandos Administrativos:**\n"
        "!juego admin cambiar_rol @usuario <rol> - Cambia el rol de un usuario.\n"
        "!juego admin añadir_logro @usuario <logro> - Añade un logro a un usuario.\n"
        "!juego admin quitar_logro @usuario <logro> - Quita un logro de un usuario.\n"
        "!juego admin restablecer_usuario @usuario - Restablece el progreso de un usuario.\n"
        "!juego admin cooldown <comando> <tiempo> - Cambia el cooldown de un comando.\n"
        "!juego admin multiplicador <accion/trabajar> <valor> - Establece el multiplicador económico."
    ),
    "language_set": "Tu idioma ha sido establecido a '{language}'.",
    "no_role": (
        "No has elegido un rol. Por favor, elige un rol usando "
        "!juego elegir_rol <rol>."
    ),
    "role_invalid": (
        "El rol ingresado no es válido. Los roles disponibles son "
        "mafia, civil y policía."
    ),
    "role_selected": "Has elegido el rol de **{role}**.",
    "no_achievements": "Aún no has obtenido ningún logro.",
    "achievements_title": "Tus Logros",
    "inventory_empty": "Tu inventario está vacío.",
    "inventory_title": "Tu Inventario",
    "no_leaderboard_data": "No hay datos suficientes para mostrar la clasificación.",
    "leaderboard_title": "Clasificación de Jugadores",
    "item_not_found": "El objeto especificado no existe en la tienda.",
    "not_enough_money": "No tienes suficientes monedas para comprar este objeto.",
    "item_purchased": "Has comprado **{item}** exitosamente.",
    "daily_mission_completed": "Ya has completado tu misión diaria.",
    "daily_mission_in_progress": (
        "Ya tienes una misión diaria en progreso: **{mission}**."
    ),
    "daily_mission_assigned": (
        "Se te ha asignado una nueva misión diaria: **{mission}**."
    ),
    "level_up_title": "¡Nivel Superior!",
    "level_up": "¡Felicidades! Has alcanzado el nivel {level}.",
    "released_title": "Has sido liberado",
    "released_from_jail": (
        "Has cumplido tu tiempo en la cárcel y ahora eres libre."
    ),
    "in_jail_title": "Estás en la cárcel",
    "in_jail": (
        "Debes esperar {time} minutos antes de poder realizar esta acción."
    ),
    "caught_title": "¡Te Han Capturado!",
    "caught_by_police": (
        "La policía te ha capturado durante tus actividades ilegales. "
        "Estarás en la cárcel por 3 minutos."
    ),
    "action_title": "Acción",
    "action_mafia": (
        "Has realizado una operación clandestina y ganado {earnings} monedas "
        "y {xp_gain} puntos de experiencia."
    ),
    "action_civilian": (
        "Has trabajado honestamente y ganado {earnings} monedas "
        "y {xp_gain} puntos de experiencia."
    ),
    "action_police": (
        "Has patrullado la ciudad y ganado {earnings} monedas "
        "y {xp_gain} puntos de experiencia."
    ),
    "work_title": "Trabajo",
    "work_success": (
        "Has completado tu trabajo y ganado {earnings} monedas "
        "y {xp_gain} puntos de experiencia."
    ),
    "challenge_result": "¡{winner} ha ganado el desafío!",
    "challenge_sent": "Has enviado un desafío a {opponent}.",
    # Misiones Diarias Mejoradas
    "daily_missions": [
        "Capturar a 5 miembros de la mafia.",
        "Completar 3 trabajos exitosamente.",
        "Ganar un total de 1000 monedas.",
        "Alcanzar el nivel 5.",
        "Realizar 10 acciones.",
        "Desafiar y ganar contra otro jugador.",
        "Comprar 2 objetos en la tienda.",
        "Ganar 500 monedas en un solo desafío.",
        "Subir de nivel 2 veces.",
        "Completar una misión sin fallar.",
    ],
    # Ayuda Administrativa
    "admin_help": (
        "**Comandos Administrativos:**\n"
        "!juego admin cambiar_rol @usuario <rol> - Cambia el rol de un usuario.\n"
        "!juego admin añadir_logro @usuario <logro> - Añade un logro a un usuario.\n"
        "!juego admin quitar_logro @usuario <logro> - Quita un logro de un usuario.\n"
        "!juego admin restablecer_usuario @usuario - Restablece el progreso de un usuario.\n"
        "!juego admin cooldown <comando> <tiempo> - Cambia el cooldown de un comando.\n"
        "!juego admin multiplicador <accion/trabajar> <valor> - Establece el multiplicador económico."
    ),
}